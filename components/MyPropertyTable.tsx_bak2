"use client";

import {
  ColumnDef,
  useReactTable,
  getCoreRowModel,
  flexRender
} from "@tanstack/react-table";
import { MyProperty } from "@/lib/api";

type Props = {
  data: MyProperty[];
};

export default function MyPropertyTable({ data }: Props) {
  const columns: ColumnDef<MyProperty>[] = [
    { accessorKey: "type", header: "🏠 구분" },
    { accessorKey: "address", header: "📍 주소지" },
    { accessorKey: "officialPrice", header: "💰 공시지가 (만원)" },
    { accessorKey: "lastTransactionDate", header: "📅 최근 거래일자" },
    { accessorKey: "lastTransactionPrice", header: "💸 최근 실거래가 (만원)" },
    { accessorKey: "ownershipTransferredAt", header: "🗓 소유권 이전일" },
    {
      accessorKey: "speculativeZone",
      header: "📌 투기과열지구",
      cell: ({ getValue }) => (getValue() ? "✅ 해당" : "❌ 없음")
    },
    {
      accessorKey: "rentalBusinessStartedAt",
      header: "🏢 임대사업 개시일",
      cell: ({ getValue }) => (getValue() ? getValue() : "-")
    }
  ];

  const table = useReactTable({
    data,
    columns,
    getCoreRowModel: getCoreRowModel()
  });

  return (
    <div className="my-10 mx-auto max-w-7xl px-4">
      <div className="overflow-x-auto rounded-xl shadow-md bg-white/80 dark:bg-gray-900/50 backdrop-blur-md p-6 border border-gray-200 dark:border-gray-700">
        <table className="min-w-full text-sm text-gray-800 dark:text-gray-200">
          <thead className="bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500 text-white">
            {table.getHeaderGroups().map(headerGroup => (
              <tr key={headerGroup.id}>
                {headerGroup.headers.map(header => (
                  <th key={header.id} className="p-3 text-left font-semibold">
                    {flexRender(header.column.columnDef.header, header.getContext())}
                  </th>
                ))}
              </tr>
            ))}
          </thead>
          <tbody>
            {table.getRowModel().rows.map(row => (
              <tr
                key={row.id}
                className="hover:bg-indigo-50 dark:hover:bg-gray-800 transition-colors duration-300"
              >
                {row.getVisibleCells().map(cell => (
                  <td key={cell.id} className="p-3 border-b border-gray-200 dark:border-gray-700">
                    {flexRender(cell.column.columnDef.cell, cell.getContext())}
                  </td>
                ))}
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
}

